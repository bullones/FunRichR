group_dynamic <- cutreeDynamic(dendro = mat_tree,
distM = as.matrix(mat_dist),
minClusterSize = 10)
names(group_dynamic) <- mat_tree$labels
dynamic_k <- ifelse((names(table(group_dynamic))[1] != 0), length(table(group_dynamic)), length(table(group_dynamic)) - 1)
group_dynamic <- cutreeDynamic(dendro = mat_tree,
distM = as.matrix(mat_dist),
minClusterSize = 20)
names(group_dynamic) <- mat_tree$labels
dynamic_k <- ifelse((names(table(group_dynamic))[1] != 0), length(table(group_dynamic)), length(table(group_dynamic)) - 1)
View(enrichment_list)
View(enrichment_list)
length(enrichment_list$`BP-OE`$`drought_14d.<.control`)
dim(enrichment_list$`BP-OE`$`drought_14d.<.control`)
dim(enrichment_list$`BP-OE`$`drought_14d.<.control`)[1]
nrow(enrichment_list$`BP-OE`$`drought_14d.<.control`)
nrow(enrichment_list[[LIST_LEVEL]][[i]])
tmp_tree <- pairwise_termsim(enrichment_list[[LIST_LEVEL]][[i]],
showCategory = nrow(enrichment_list[[LIST_LEVEL]][[i]]))
mat <- tmp_tree@termsim # SOLO TIENE EL UPPER TRIANGLE
View(mat)
tmat <- t(mat)
mat[lower.tri(mat)] <- tmat[lower.tri(tmat)]
mat[is.na(mat)] <- 1
mat_dist <- as.dist(mat)
mat_tree <- hclust(mat_dist, method = "ward.D")
group_dynamic <- cutreeDynamic(dendro = mat_tree,
distM = as.matrix(mat_dist),
minClusterSize = 10)
names(group_dynamic) <- mat_tree$labels
dynamic_k <- ifelse((names(table(group_dynamic))[1] != 0), length(table(group_dynamic)), length(table(group_dynamic)) - 1)
## HASTA AQUÍ ##
# treeplot
p_tp <- treeplot(tmp_tree,
showCategory = length(tmp),
fontsize = 3,
nCluster = NCLUST,
# label_format_tiplab = 35,
cluster.params = list(label_words_n = 5, label_format = 30)) +
ggtitle(paste0(names(enrichment_list[[LIST_LEVEL]][i]), " enriched GOs (", ONT, ")")) +
theme(plot.title = element_text(hjust = 0.9))
print(p_tp)
NCLUST <- dynamic_k
## HASTA AQUÍ ##
# treeplot
p_tp <- treeplot(tmp_tree,
showCategory = length(tmp),
fontsize = 3,
nCluster = NCLUST,
# label_format_tiplab = 35,
cluster.params = list(label_words_n = 5, label_format = 30)) +
ggtitle(paste0(names(enrichment_list[[LIST_LEVEL]][i]), " enriched GOs (", ONT, ")")) +
theme(plot.title = element_text(hjust = 0.9))
print(p_tp)
group_dynamic <- cutreeDynamic(dendro = mat_tree,
distM = as.matrix(mat_dist),
minClusterSize = 20)
names(group_dynamic) <- mat_tree$labels
dynamic_k <- ifelse((names(table(group_dynamic))[1] != 0), length(table(group_dynamic)), length(table(group_dynamic)) - 1)
NCLUST <- dynamic_k
## HASTA AQUÍ ##
# treeplot
p_tp <- treeplot(tmp_tree,
showCategory = length(tmp),
fontsize = 3,
nCluster = NCLUST,
# label_format_tiplab = 35,
cluster.params = list(label_words_n = 5, label_format = 30)) +
ggtitle(paste0(names(enrichment_list[[LIST_LEVEL]][i]), " enriched GOs (", ONT, ")")) +
theme(plot.title = element_text(hjust = 0.9))
print(p_tp)
## HASTA AQUÍ ##
# treeplot
p_tp <- treeplot(tmp_tree,
# showCategory = length(tmp),
fontsize = 3,
nCluster = NCLUST,
# label_format_tiplab = 35,
cluster.params = list(label_words_n = 5, label_format = 30)) +
ggtitle(paste0(names(enrichment_list[[LIST_LEVEL]][i]), " enriched GOs (", ONT, ")")) +
theme(plot.title = element_text(hjust = 0.9))
print(p_tp)
## HASTA AQUÍ ##
# treeplot
p_tp <- treeplot(tmp_tree,
# showCategory = length(tmp),
fontsize = 3,
# nCluster = NCLUST,
# label_format_tiplab = 35,
cluster.params = list(label_words_n = 5, label_format = 30)) +
ggtitle(paste0(names(enrichment_list[[LIST_LEVEL]][i]), " enriched GOs (", ONT, ")")) +
theme(plot.title = element_text(hjust = 0.9))
print(p_tp)
## HASTA AQUÍ ##
# treeplot
p_tp <- treeplot(tmp_tree,
showCategory = length(tmp),
fontsize = 3,
# nCluster = NCLUST,
# label_format_tiplab = 35,
cluster.params = list(label_words_n = 5, label_format = 30)) +
ggtitle(paste0(names(enrichment_list[[LIST_LEVEL]][i]), " enriched GOs (", ONT, ")")) +
theme(plot.title = element_text(hjust = 0.9))
print(p_tp)
## HASTA AQUÍ ##
# treeplot
p_tp <- treeplot(tmp_tree,
showCategory = length(tmp),
fontsize = 3,
nCluster = 10,
# nCluster = NCLUST,
# label_format_tiplab = 35,
cluster.params = list(label_words_n = 5, label_format = 30)) +
ggtitle(paste0(names(enrichment_list[[LIST_LEVEL]][i]), " enriched GOs (", ONT, ")")) +
theme(plot.title = element_text(hjust = 0.9))
print(p_tp)
length(tmp)
number_genes_enrichment[[LIST_LEVEL]][[i]]
ENRICH_FACTOR
trunc(number_genes_enrichment[[LIST_LEVEL]][[i]]/ENRICH_FACTOR)
source("~/datos_bullones/Bioinformatica/sequia_olivo_ana/data_26_1_23_both/new_analysis_06-11-23/enrichment_configure_DEGs_TREAT_koroneiki_cpm0.R")
source("~/datos_bullones/Bioinformatica/sequia_olivo_ana/data_26_1_23_both/new_analysis_06-11-23/enrichment_configure_DEGs_TREAT_koroneiki_cpm0.R")
i <- 1
tmp <- enrichment_list[[LIST_LEVEL]][[i]]
MIN_GENES <- trunc(number_genes_enrichment[[LIST_LEVEL]][[i]]/ENRICH_FACTOR)
if (MIN_GENES == 0) {
MIN_GENES <- 1
} # end if
tmp2 <- tmp$Count >= MIN_GENES
# if no process passes the filter, we skip the plots
if (!any(tmp2)) {
next
} # end if
tmp <- tmp[tmp2]$Description
tmp <- enrichment_list[[LIST_LEVEL]][[i]]
enrichment_filt <- tmp[tmp2]
tmp <- tmp[tmp2]$Description
View(enrichment_filt)
kk <- enrichment_list[[LIST_LEVEL]][[i]]
View(kk)
tmp <- enrichment_list[[LIST_LEVEL]][[i]]
View(tmp)
tmp2 <- tmp[tmp$Count >= MIN_GENES]
View(tmp2)
tmp <- enrichment_list[[LIST_LEVEL]][[i]]
MIN_GENES <- trunc(number_genes_enrichment[[LIST_LEVEL]][[i]]/ENRICH_FACTOR)
if (MIN_GENES == 0) {
MIN_GENES <- 1
} # end if
tmp2 <- tmp$Count >= MIN_GENES
# if no process passes the filter, we skip the plots
if (!any(tmp2)) {
next
} # end if
enrichment_filt <- tmp[tmp2]
tmp <- enrichment_filt$Description
# treeplot
set.seed(SEED)
tmp_tree <- pairwise_termsim(enrichment_list[[LIST_LEVEL]][[i]],
showCategory = nrow(enrichment_list[[LIST_LEVEL]][[i]]))
tmp_tree <- pairwise_termsim(enrichment_filt,
showCategory = nrow(enrichment_filt)
## REVISAR DESDE AQUÍ ##
# to get the number of clusters
library(factoextra)
tmp_tree <- pairwise_termsim(enrichment_filt,
showCategory = nrow(enrichment_filt))
View(tmp_tree)
tmp_tree2 <- tmp_tree[tmp$Count >= MIN_GENES]
tmp_tree2 <- tmp_tree[tmp_tree$Count >= MIN_GENES]
View(tmp_tree2)
## HASTA AQUÍ ##
# treeplot
p_tp <- treeplot(tmp_tree2,
showCategory = length(tmp),
fontsize = 3,
nCluster = NCLUST,
# label_format_tiplab = 35,
cluster.params = list(label_words_n = 5, label_format = 30)) +
ggtitle(paste0(names(enrichment_list[[LIST_LEVEL]][i]), " enriched GOs (", ONT, ")")) +
theme(plot.title = element_text(hjust = 0.9))
tmp <- enrichment_list[[LIST_LEVEL]][[i]]
MIN_GENES <- trunc(number_genes_enrichment[[LIST_LEVEL]][[i]]/ENRICH_FACTOR)
if (MIN_GENES == 0) {
MIN_GENES <- 1
} # end if
tmp2 <- tmp$Count >= MIN_GENES
# if no process passes the filter, we skip the plots
if (!any(tmp2)) {
next
} # end if
enrichment_filt <- tmp[tmp2]
tmp <- enrichment_filt$Description
# treeplot
set.seed(SEED)
tmp_tree <- pairwise_termsim(enrichment_list[[LIST_LEVEL]][[i]],
showCategory = nrow(enrichment_list[[LIST_LEVEL]][[i]]))
## REVISAR DESDE AQUÍ ##
# to get the number of clusters
library(factoextra)
library(cluster)
library(dynamicTreeCut)
mat <- tmp_tree@termsim # SOLO TIENE EL UPPER TRIANGLE
tmat <- t(mat)
mat[lower.tri(mat)] <- tmat[lower.tri(tmat)]
mat[is.na(mat)] <- 1
mat_dist <- as.dist(mat)
mat_tree <- hclust(mat_dist, method = "ward.D")
group_dynamic <- cutreeDynamic(dendro = mat_tree,
distM = as.matrix(mat_dist),
minClusterSize = 20)
names(group_dynamic) <- mat_tree$labels
dynamic_k <- ifelse((names(table(group_dynamic))[1] != 0), length(table(group_dynamic)), length(table(group_dynamic)) - 1)
NCLUST <- dynamic_k
## HASTA AQUÍ ##
# treeplot
p_tp <- treeplot(tmp_tree,
showCategory = length(tmp),
fontsize = 3,
nCluster = NCLUST,
# label_format_tiplab = 35,
cluster.params = list(label_words_n = 5, label_format = 30)) +
ggtitle(paste0(names(enrichment_list[[LIST_LEVEL]][i]), " enriched GOs (", ONT, ")")) +
theme(plot.title = element_text(hjust = 0.9))
print(p_tp)
View(mat_tree)
kk <- mat_tree$height
head(kk)
kk
max(kk)
CUTFACTOR <- 0.95
groups_orient <- cutree(mat_tree, h = CUTFACTOR * max(mat_tree$height))
groups_orient
kable(t(as.data.frame(table(groups_orient))), caption = "Groups using the orientative k")
as.data.frame(table(groups_orient))
dim(as.data.frame(table(groups_orient)))
lenght(as.data.frame(table(groups_orient)))
length(as.data.frame(table(groups_orient)))
CUTFACTOR <- 0.99
groups_orient <- cutree(mat_tree, h = CUTFACTOR * max(mat_tree$height))
as.data.frame(table(groups_orient))
max(mat_tree$height)
CUTFACTOR <- 1
groups_orient <- cutree(mat_tree, h = CUTFACTOR * max(mat_tree$height))
as.data.frame(table(groups_orient))
CUTFACTOR <- 0.5
groups_orient <- cutree(mat_tree, h = CUTFACTOR * max(mat_tree$height))
as.data.frame(table(groups_orient))
CUTFACTOR <- 0.05
groups_orient <- cutree(mat_tree, h = CUTFACTOR * max(mat_tree$height))
as.data.frame(table(groups_orient))
CUTFACTOR <- 0.25
groups_orient <- cutree(mat_tree, h = CUTFACTOR * max(mat_tree$height))
as.data.frame(table(groups_orient))
View(enrichment_list)
help(dotplot)
for (i in 1:length(enrichment_list[[LIST_LEVEL]])) {
tmp <- enrichment_list[[LIST_LEVEL]][[i]]
MIN_GENES <- trunc(number_genes_enrichment[[LIST_LEVEL]][[i]]/ENRICH_FACTOR)
if (MIN_GENES == 0) {
MIN_GENES <- 1
} # end if
tmp2 <- tmp$Count >= MIN_GENES
# if no process passes the filter, we skip the plots
if (!any(tmp2)) {
next
} # end if
enrichment_filt <- tmp[tmp2]
tmp <- enrichment_filt$Description
# treeplot
set.seed(SEED)
tmp_tree <- pairwise_termsim(enrichment_list[[LIST_LEVEL]][[i]],
showCategory = nrow(enrichment_list[[LIST_LEVEL]][[i]]))
## REVISAR DESDE AQUÍ ##
# to get the number of clusters
library(factoextra)
library(cluster)
library(dynamicTreeCut)
mat <- tmp_tree@termsim # SOLO TIENE EL UPPER TRIANGLE
tmat <- t(mat)
mat[lower.tri(mat)] <- tmat[lower.tri(tmat)]
mat[is.na(mat)] <- 1
mat_dist <- as.dist(mat)
mat_tree <- hclust(mat_dist, method = "ward.D")
group_dynamic <- cutreeDynamic(dendro = mat_tree,
distM = as.matrix(mat_dist),
minClusterSize = 20)
names(group_dynamic) <- mat_tree$labels
dynamic_k <- ifelse((names(table(group_dynamic))[1] != 0), length(table(group_dynamic)), length(table(group_dynamic)) - 1)
NCLUST <- dynamic_k
## HASTA AQUÍ ##
# treeplot
p_tp <- treeplot(tmp_tree,
showCategory = length(tmp),
fontsize = 3,
nCluster = NCLUST,
# label_format_tiplab = 35,
cluster.params = list(label_words_n = 5, label_format = 30)) +
ggtitle(paste0(names(enrichment_list[[LIST_LEVEL]][i]), " enriched GOs (", ONT, ")")) +
theme(plot.title = element_text(hjust = 0.9))
print(p_tp)
}
network_plots <- list()
network_plots[[LIST_LEVEL]] <- list()
i <- 1
tmp <- enrichment_list[[LIST_LEVEL]][[i]]
MIN_GENES <- trunc(number_genes_enrichment[[LIST_LEVEL]][[i]]/ENRICH_FACTOR)
if (MIN_GENES == 0) {
MIN_GENES <- 1
} # end if
tmp2 <- tmp$Count >= MIN_GENES
# if no process passes the filter, we skip the plots
if (!any(tmp2)) {
next
} # end if
tmp <- tmp[tmp2]$Description
# network
set.seed(SEED)
p_nt <- emapplot(pairwise_termsim(enrichment_list[[LIST_LEVEL]][[i]]),
showCategory = length(tmp), # seleccionamos cuántos procesos
# cex_label_category = 0.5, # tamaño etiquetas nodos
node_label = "none") + # quitar etiquetas
ggtitle(paste0(names(enrichment_list[[LIST_LEVEL]][i]), " enriched GOs (", ONT, ")"))
print(p_nt)
p_nt <- emapplot(pairwise_termsim(enrichment_list[[LIST_LEVEL]][[i]]),
showCategory = tmp, # seleccionamos cuántos procesos
# cex_label_category = 0.5, # tamaño etiquetas nodos
node_label = "none") + # quitar etiquetas
ggtitle(paste0(names(enrichment_list[[LIST_LEVEL]][i]), " enriched GOs (", ONT, ")"))
class(tmp)
p_nt <- emapplot(pairwise_termsim(enrichment_list[[LIST_LEVEL]][[i]]),
showCategory = as.vector(tmp), # seleccionamos cuántos procesos
# cex_label_category = 0.5, # tamaño etiquetas nodos
node_label = "none") + # quitar etiquetas
ggtitle(paste0(names(enrichment_list[[LIST_LEVEL]][i]), " enriched GOs (", ONT, ")"))
View(enrichment_filt)
View(enrichment_list)
p_nt <- emapplot(pairwise_termsim(enrichment_list[[LIST_LEVEL]][[i]]),
showCategory = length(tmp), # seleccionamos cuántos procesos
# cex_label_category = 0.5, # tamaño etiquetas nodos
node_label = "none") + # quitar etiquetas
ggtitle(paste0(names(enrichment_list[[LIST_LEVEL]][i]), " enriched GOs (", ONT, ")"))
print(p_nt)
source("~/datos_bullones/Bioinformatica/sequia_olivo_ana/data_26_1_23_both/new_analysis_06-11-23/enrichment_configure_DEGs_TREAT_koroneiki_cpm0.R")
i
View(enrichment_list)
tmp <- enrichment_list[[LIST_LEVEL]][[i]]
MIN_GENES <- trunc(number_genes_enrichment[[LIST_LEVEL]][[i]]/ENRICH_FACTOR)
if (MIN_GENES == 0) {
MIN_GENES <- 1
} # end if
tmp2 <- tmp$Count >= MIN_GENES
# if no process passes the filter, we skip the plots
if (!any(tmp2)) {
next
} # end if
enrichment_filt <- tmp[tmp2]
tmp <- enrichment_filt$Description
# treeplot
set.seed(SEED)
tmp_tree <- pairwise_termsim(enrichment_list[[LIST_LEVEL]][[i]],
showCategory = nrow(enrichment_list[[LIST_LEVEL]][[i]]))
View(tmp_tree)
## REVISAR DESDE AQUÍ ##
# to get the number of clusters
library(factoextra)
library(cluster)
library(dynamicTreeCut)
mat <- tmp_tree@termsim # SOLO TIENE EL UPPER TRIANGLE
View(mat)
tmat <- t(mat)
mat[lower.tri(mat)] <- tmat[lower.tri(tmat)]
mat[is.na(mat)] <- 1
mat_dist <- as.dist(mat)
mat_tree <- hclust(mat_dist, method = "ward.D")
group_dynamic <- cutreeDynamic(dendro = mat_tree,
distM = as.matrix(mat_dist),
minClusterSize = 20)
names(group_dynamic) <- mat_tree$labels
dynamic_k <- ifelse((names(table(group_dynamic))[1] != 0), length(table(group_dynamic)), length(table(group_dynamic)) - 1)
group_dynamic
names(table(group_dynamic))[1]
length(table(group_dynamic)
)
length(table(group_dynamic))
dynamic_k <- length(table(group_dynamic))
NCLUST <- dynamic_k
## HASTA AQUÍ ##
# treeplot
p_tp <- treeplot(tmp_tree,
showCategory = length(tmp),
fontsize = 3,
nCluster = NCLUST,
# label_format_tiplab = 35,
cluster.params = list(label_words_n = 5, label_format = 30)) +
ggtitle(paste0(names(enrichment_list[[LIST_LEVEL]][i]), " enriched GOs (", ONT, ")")) +
theme(plot.title = element_text(hjust = 0.9))
print(p_tp)
source("~/datos_bullones/Bioinformatica/sequia_olivo_ana/data_26_1_23_both/new_analysis_06-11-23/enrichment_configure_DEGs_TREAT_koroneiki_cpm0.R")
source("~/datos_bullones/Bioinformatica/alergenos/proteoma/enrichment_configure_DEGs_picual_vs_arbeq_CPM-0.5.R")
source("~/datos_bullones/Bioinformatica/alergenos/proteoma/enrichment_configure_DEGs_picual_vs_arbeq_CPM-0.5.R")
source("~/datos_bullones/Bioinformatica/alergenos/proteoma/enrichment_configure_DEGs_picual_vs_arbeq_CPM-0.5.R")
source("~/datos_bullones/Bioinformatica/alergenos/proteoma/enrichment_configure_DEGs_picual_vs_arbeq_CPM-0.5.R")
source("~/datos_bullones/Bioinformatica/alergenos/proteoma/enrichment_configure_DEGs_picual_vs_arbeq_CPM-0.5.R")
m2 <- matrix(1:20, 4, 5)
m2
m2[lower.tri(m2)]
m2[lower.tri(m2)] <- NA
m2
m2[lower.tri(m2)] <- ""
m2
m2[lower.tri(m2)] <- NA
m2
# parth to the directory containing the source files ####
SOURCE_DIR <- "/home/bullones/datos_bullones/Bioinformatica/Script/Script_R/enrichment_RSeqFlow/"
# path to the directory containing the data file ####
WD_DIR <- "/home/bullones/Escritorio/"
# data file ####
FILE <- "DESeq2_FDR.tsv"
# orthology file ####
ORTHOLOGY_FILE <- "/home/bullones/Escritorio/Annona_ort.tsv"
# load data ####
genes <- read.table(file = paste0(WD_DIR, FILE),
sep = "\t",
header = TRUE)
View(genes)
ort <- read.table(file = ORTHOLOGY_FILE,
sep = "\t",
header = TRUE)
# allContrasts <- c("CJ_vs_T16")
genes_list <- list()
tmp_up <- genes[genes[3] > 0,]
View(tmp_up)
tmp_down <- genes[genes[3] < 0,]
View(tmp_down)
genes_list[["CJ_vs_T16_up"]] <- tmp_up[,1]
genes_list[["CJ_vs_T16_down"]] <- tmp_down[,1]
View(genes_list)
rm(genes, tmp_up, tmp_down)
# create sublist for over-enrichment analysis
LIST_LEVEL <- paste0(ONT, "-OE")
opts_chunk$set(echo = VERBOSE_MODE) # para mostrar el código o no
# creamos una lista
genes_list_arab <- list()
# la rellenamos con los ortólogos
for (i in 1:length(genes_list))
{
temp <- merge(x = as.data.frame(genes_list[[i]]),
y = ort,
by = 1,
all = FALSE)
# cambiamos el nombre de las columnas
colnames(temp)[1] <-  ORG_ORIG
colnames(temp)[which(names(temp) == names(ort))] <- ORG_ENRICH
if (length(temp) == 3) {
temp <- temp[, c(1, 3, 2)]
colnames(temp)[3] <- "log2_FC"
}
temp[[2]] <- gsub('\\..*', "", temp[[2]]) # remove isoform
# save only if we found orthologs
check_orthologs <- !trimws(temp[[2]]) == ""
check_orthologs <- any(check_orthologs)
if (check_orthologs == TRUE) {
name <- names(genes_list)[i]
genes_list_arab[[name]] <- temp
} else {
message(paste0("No orthologs found for ", names(genes_list)[i]))
}
}
# organism ####
# original organism
ORG_ORIG <- "Annona"
# don't touch
ORG_ORIG <- paste0("ID_", ORG_ORIG)
# organism for enrichment
ORG_ENRICH <- "Arabidopsis"
# don't touch
ORG_ENRICH <- paste0("ID_", ORG_ENRICH)
organism <- "org.At.tair.db" # arabidopsis
# la rellenamos con los ortólogos
for (i in 1:length(genes_list))
{
temp <- merge(x = as.data.frame(genes_list[[i]]),
y = ort,
by = 1,
all = FALSE)
# cambiamos el nombre de las columnas
colnames(temp)[1] <-  ORG_ORIG
colnames(temp)[which(names(temp) == names(ort))] <- ORG_ENRICH
if (length(temp) == 3) {
temp <- temp[, c(1, 3, 2)]
colnames(temp)[3] <- "log2_FC"
}
temp[[2]] <- gsub('\\..*', "", temp[[2]]) # remove isoform
# save only if we found orthologs
check_orthologs <- !trimws(temp[[2]]) == ""
check_orthologs <- any(check_orthologs)
if (check_orthologs == TRUE) {
name <- names(genes_list)[i]
genes_list_arab[[name]] <- temp
} else {
message(paste0("No orthologs found for ", names(genes_list)[i]))
}
}
View(genes_list_arab)
# change names for constrasts
names(genes_list_arab)[grep("_up", names(genes_list_arab))] <- gsub("\\.", "\\.>\\.", names(genes_list_arab)[grep("_up", names(genes_list_arab))])
names(genes_list_arab)[grep("_down", names(genes_list_arab))] <- gsub("\\.", "\\.<\\.", names(genes_list_arab)[grep("_down", names(genes_list_arab))])
names(genes_list_arab) <- gsub("_up", "", names(genes_list_arab))
names(genes_list_arab) <- gsub("_down", "", names(genes_list_arab))
source("~/Escritorio/configure_WGCNA.R")
source("~/Escritorio/configure_WGCNA.R")
